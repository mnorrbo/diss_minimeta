for (i in 1:10) {
centre_movement <- kmeans(data, 2, iter.max = i)$centers
plots[[i]] <- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 2, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 2, color = 'red')
for (i in 1:10) {
centre_movement <- kmeans(data, 2, iter.max = i)$centers
plots[[i]] <- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 2, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 2, color = 'red')
}
centre_movement <- kmeans(data, 2, iter.max = i)$centers
ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 2, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 2, color = 'red')
ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 3, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 3, color = 'red')
View(data)
kmeans(data, 2, iter.max = i)
kmeans(data, 2, iter.max = i)$clusters
cbind(data, kmeans(data, 2, iter.max = i)$cluster)
centre_movement <- kmeans(data, 2, iter.max = i)$centers
data_clustered <- cbind(data, kmeans(data, 2, iter.max = i)$cluster)
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 3, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 3, color = 'red')
data_clustered
data_clustered <- cbind(data, cluster = kmeans(data, 2, iter.max = i)$cluster)
plots[[i]] <- ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 3, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 3, color = 'red')
data_clustered <- cbind(data, cluster = kmeans(data, 2, iter.max = i)$cluster)
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 3, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 3, color = 'red')
data_clustered <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), size = 3, color = 'red') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), size = 3, color = 'red')
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), shape = 4, size = 3, color = 'orange') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), shape = 2, size = 3, color = 'orange')
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), shape = 4, size = 3, color = 'orange') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), shape = 4, size = 3, color = 'orange')
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), shape = 4, size = 6, color = 'orange') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), shape = 4, size = 6, color = 'orange')
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), shape = 4, size = 6, color = 'black')
plots <- list()
for (i in 1:10) {
centre_movement <- kmeans(data, 2, iter.max = i)$centers
data_clustered <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
plots[[i]] <- ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), shape = 4, size = 6, color = 'black')
}
plots[[1]]
plots[[2]]
plots[[1]]
plots[[10]]
i = NULL
plots <- list()
for (i in 1:10) {
centre_movement <- kmeans(data, 2, iter.max = i)$centers
data_clustered <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
plots[[i]] <- ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = movement_centres[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centre_movement[2,1], x = movement_centres[2, 2]), shape = 4, size = 6, color = 'black')
}
plots[[10]]
plots[[1]]
plots[[2]]
plots[[3]]
plots[[34]
plots[[4]]
plots <- list()
for (i in 1:10) {
centre_movement <- kmeans(data, 2, iter.max = i)$centers
data_clustered <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
plots[[i]] <- ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = centre_movement[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centre_movement[2,1], x = centre_movement[2, 2]), shape = 4, size = 6, color = 'black')
}
plots[[4]]
plots[[10]]
plots[[1]]
plots[[10]]
plots[[3]]
plots[[4]]
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal()
geom_point(aes(y = centre_movement[2,1], x = centre_movement[2, 2]), shape = 4, size = 6, color = 'black')
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = centre_movement[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centre_movement[2,1], x = centre_movement[2, 2]), shape = 4, size = 6, color = 'black')
plots[[1]]
plots[[10]]
plots <- list()
for (i in 1:10) {
centre_movement <- kmeans(data, 2, iter.max = i)$centers
data_clustered <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
plots[[i]] <- ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centre_movement[1,1], x = centre_movement[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centre_movement[2,1], x = centre_movement[2, 2]), shape = 4, size = 6, color = 'black')
}
plots[[10]]
plots[[1]]
centre_movement <- list()
plots <- list()
centre_movement[[i]] <- kmeans(data, 2, iter.max = i)$centers
centre_movement[[i]][1,1]
plots <- list()
centre_movement <- list()
for (i in 1:10) {
nam <- paste("centers_", i, sep = "")
assign(nam, kmeans(data, 2, iter.max = i)$centers)
data_clustered <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
plots[[i]] <- ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = nam[1,1], x = nam[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = nam[2,1], x = nam[2, 2]), shape = 4, size = 6, color = 'black')
}
plots[[1]]
paste("D", i, sep = "")
paste("D", i, sep = "") <- 5
nam <- paste("centers_", i, sep = "")
assign(nam, kmeans(data, 2, iter.max = i)$centers)
data_clustered <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = nam[1,1], x = nam[1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = nam[2,1], x = nam[2, 2]), shape = 4, size = 6, color = 'black')
nam[1]
View(centers_1)
for (i in 1:10) {
# nam <- paste("centers_", i, sep = "")
centres[[i]] <- kmeans(data, 2, iter.max = i)$centers
data_clustered[[i]] <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
}
centres <- list()
data_clustered <- list()
for (i in 1:10) {
# nam <- paste("centers_", i, sep = "")
centres[[i]] <- kmeans(data, 2, iter.max = i)$centers
data_clustered[[i]] <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
}
centers
centres
nam <- paste("plot_", i, sep = "")
assign(nam,
ggplot(data_clustered, aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centres[[i]][1,1], x = centres[[i]][1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centres[[i]][2,1], x = centres[[i]][2, 2]), shape = 4, size = 6, color = 'black')
)
nam <- paste("plot_", i, sep = "")
assign(nam,
ggplot(data_clustered[[i]], aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centres[[i]][1,1], x = centres[[i]][1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centres[[i]][2,1], x = centres[[i]][2, 2]), shape = 4, size = 6, color = 'black')
)
View(plot_10)
plot_10
or (i in 1:10) {
# nam <- paste("centers_", i, sep = "")
centres[[i]] <- kmeans(data, 2, iter.max = i)$centers
data_clustered[[i]] <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
nam <- paste("plot_", i, sep = "")
assign(nam,
ggplot(data_clustered[[i]], aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centres[[i]][1,1], x = centres[[i]][1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centres[[i]][2,1], x = centres[[i]][2, 2]), shape = 4, size = 6, color = 'black')
)
}
for (i in 1:10) {
# nam <- paste("centers_", i, sep = "")
centres[[i]] <- kmeans(data, 2, iter.max = i)$centers
data_clustered[[i]] <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
nam <- paste("plot_", i, sep = "")
assign(nam,
ggplot(data_clustered[[i]], aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centres[[i]][1,1], x = centres[[i]][1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centres[[i]][2,1], x = centres[[i]][2, 2]), shape = 4, size = 6, color = 'black')
)
}
plot_1
plot_10
drun(iris)
dput(plot_1)
for (i in 1:10) {
# nam <- paste("centers_", i, sep = "")
centres[[i]] <- kmeans(data, 2, iter.max = i)$centers
data_clustered[[i]] <- cbind(data, cluster = factor(kmeans(data, 2, iter.max = i)$cluster))
nam <- paste("plot_", i, sep = "")
assign(nam,
dput(
ggplot(data_clustered[[i]], aes(x = Sepal.Width, y = Sepal.Length, color = cluster)) +
geom_point() +
theme_minimal() +
geom_point(aes(y = centres[[i]][1,1], x = centres[[i]][1, 2]), shape = 4, size = 6, color = 'black') +
geom_point(aes(y = centres[[i]][2,1], x = centres[[i]][2, 2]), shape = 4, size = 6, color = 'black')
)
)
}
View(plot_1)
plot_1
plot_10
set.seed(1337) # reproducible seed
# simulation parameters
params <- crossing(
i = 1:1000, # iterations
n.studies = 8, # max no. of studies
d = 0, # true effect size
n = seq(5, 50, 5), # vector of sample sizes
pmax.first = 0.05, # first p-value threshold
minitarget = 0.05, # minimeta threshold
method = c("HE", "FE") # random (HE) and fixed effect (FE)
)
# simulation
metahack_tmp <- purrr::pmap_dfr(params, function(...) {
dots <- list(...)
meta_hack(n.studies = dots$n.studies,
d = dots$d,
n = dots$n,
method = dots$method,
pmax.first = dots$pmax.first,
minitarget = dots$minitarget) %>%
mutate(!!!dots)
})
# all meta-analysed p-values
outof <- metahack_tmp %>%
filter(study == 0) %>%
group_by(pmax.first, minitarget, n, method, d, n.studies) %>%
count() %>%
rename(metatotal = nn) %>%
ungroup()
# all significant meta-analysed p-values
dat <- metahack_tmp %>%
filter(study == 0, p < .05) %>% # all significant meta results
group_by(pmax.first, minitarget, n, method, d, n.studies) %>%
count() %>%
ungroup()
metahack_dat <- left_join(dat, outof, by = c("n", "method", "pmax.first", "minitarget", "n.studies")) %>%
ungroup() %>%
select(n, method, nn, metatotal, n.studies) %>%
mutate(power = nn/metatotal) # calculate false positive rate
# changing column and row names for plot
metahack_dat <- metahack_dat %>%
rename(Method = method) %>%
mutate(Method = recode(Method, "HE" = "Random effects", "FE" = "Fixed effect"))
# colourblind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(metahack_dat, aes(n, power)) +
geom_line(aes(linetype = Method,
color = factor(n.studies)), size=1.5) +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, 0.1)) +
scale_x_continuous(limits = c(5, 50),
breaks = seq(5, 50, 5)) +
geom_hline(yintercept = 0.05, size = 1, linetype = "longdash") +
scale_color_manual(values=cbPalette, name = "Max studies") +
theme_bw() +
theme(axis.title = element_text(size = 15),
title = element_text(size = 15),
axis.text = element_text(size = 10),
axis.ticks.x = element_line(size = 1),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
legend.text = element_text(size = 12)) +
labs(x = "Sample size (n)",
y = "False Positive Rate (FPR)",
title = "Simulation 3: First p-value < 0.05 and meta-hack") +
annotate("text", x = 85, y = 0.022,
label = "Nominal FPR 0.05", size = 5)
ggsave("smaller_n_minimeta_metahack_plot.png", width = 10, height = 7)
ggsave("smaller_n_minimeta_metahack_plot.png", width = 10, height = 7)
set.seed(1337) # reproducible seed
# simulation parameters
params <- crossing(
i = 1:1000, # iterations
n.studies = 8, # maximum no. of studies (based on lit coding)
n = seq(5, 50, 5), # vector of sample sizes (based on lit coding)
d = 0, # population effect size
pmax.first = c(0.05, 0.1), # vector of first p-values (based on lit coding)
pmax.last = c(0.05,0.1), # vector of last p-values (based on lit coding)
method = c("HE", "FE")
)
# using p_bound_meta()
pbound_tmp <- purrr::pmap_dfr(params, function(...) {
dots <- list(...)
p_bound_meta(n.studies = dots$n.studies,
d = dots$d,
n = dots$n,
method = dots$method,
pmax.first = dots$pmax.first,
pmax.last = dots$pmax.last) %>%
mutate(!!!dots)
})
outof <- pbound_tmp %>%
filter(study == 0) %>%
group_by(pmax.first, pmax.last, n, method, d, n.studies) %>%
count() %>%
rename(metatotal = nn) %>%
ungroup()
dat <- pbound_tmp %>%
filter(study == 0, p < .05) %>% # all significant meta results
group_by(pmax.first, pmax.last, n, method, d, n.studies) %>%
count() %>%
ungroup()
pbound_dat <- left_join(dat, outof, by = c("n", "method", "pmax.first", "pmax.last", "n.studies")) %>%
select(n, method, nn, metatotal, pmax.first, pmax.last, n.studies) %>%
mutate(power = nn/metatotal) # calculate false positive rate
cbPalette <- c("#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
pbound_dat <- pbound_dat %>%
rename(Method = method) %>%
mutate(Method = recode(Method, "HE" = "Random effects", "FE" = "Fixed effect"))
ggplot(pbound_dat, aes(n, power)) +
geom_line(aes(linetype = Method,
color = factor(n.studies)), size=1) +
scale_y_continuous(limits = c(0, 0.5),
breaks = seq(0, 0.5, 0.1)) +
scale_x_continuous(limits = c(0, 50),
breaks = seq(0, 50, 10)) +
geom_hline(yintercept = 0.05, size = 1,
linetype = "longdash") +
scale_color_manual(values=cbPalette, name = "Max studies") +
theme_bw() +
theme(axis.title = element_text(size = 15),
title = element_text(size = 15),
axis.text = element_text(size = 10),
axis.ticks.x = element_line(size = 1),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12)) +
labs(x = "Sample size (n)",
y = "False Positive Rate (FPR)",
title = "Simulation 2: p-value thresholds") +
annotate("text", x = 120, y = 0.015,
label = "Nominal FPR 0.05", size = 5) +
facet_grid(pmax.last ~ pmax.first, labeller = labeller(
pmax.last = c("0.05" = "last p < 0.05", "0.1" = "last p < 0.1"),
pmax.first = c("0.05" = "first p < 0.05", "0.1" = "first p < 0.1")
))
set.seed(1337) # reproducible seed
# simulation parameters
params <- crossing(
i = 1:10000, # iterations
n.studies = 8, # maximum no. of studies (based on lit coding)
n = seq(5, 50, 5), # vector of sample sizes (based on lit coding)
d = 0, # population effect size
pmax.first = c(0.05, 0.1), # vector of first p-values (based on lit coding)
pmax.last = c(0.05,0.1), # vector of last p-values (based on lit coding)
method = c("HE", "FE")
)
# using p_bound_meta()
pbound_tmp <- purrr::pmap_dfr(params, function(...) {
dots <- list(...)
p_bound_meta(n.studies = dots$n.studies,
d = dots$d,
n = dots$n,
method = dots$method,
pmax.first = dots$pmax.first,
pmax.last = dots$pmax.last) %>%
mutate(!!!dots)
})
outof <- pbound_tmp %>%
filter(study == 0) %>%
group_by(pmax.first, pmax.last, n, method, d, n.studies) %>%
count() %>%
rename(metatotal = nn) %>%
ungroup()
dat <- pbound_tmp %>%
filter(study == 0, p < .05) %>% # all significant meta results
group_by(pmax.first, pmax.last, n, method, d, n.studies) %>%
count() %>%
ungroup()
pbound_dat <- left_join(dat, outof, by = c("n", "method", "pmax.first", "pmax.last", "n.studies")) %>%
select(n, method, nn, metatotal, pmax.first, pmax.last, n.studies) %>%
mutate(power = nn/metatotal) # calculate false positive rate
cbPalette <- c("#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
pbound_dat <- pbound_dat %>%
rename(Method = method) %>%
mutate(Method = recode(Method, "HE" = "Random effects", "FE" = "Fixed effect"))
ggplot(pbound_dat, aes(n, power)) +
geom_line(aes(linetype = Method,
color = factor(n.studies)), size=1) +
scale_y_continuous(limits = c(0, 0.5),
breaks = seq(0, 0.5, 0.1)) +
scale_x_continuous(limits = c(0, 50),
breaks = seq(0, 50, 10)) +
geom_hline(yintercept = 0.05, size = 1,
linetype = "longdash") +
scale_color_manual(values=cbPalette, name = "Max studies") +
theme_bw() +
theme(axis.title = element_text(size = 15),
title = element_text(size = 15),
axis.text = element_text(size = 10),
axis.ticks.x = element_line(size = 1),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
legend.text = element_text(size = 12),
strip.text = element_text(size = 12)) +
labs(x = "Sample size (n)",
y = "False Positive Rate (FPR)",
title = "Simulation 2: p-value thresholds") +
annotate("text", x = 120, y = 0.015,
label = "Nominal FPR 0.05", size = 5) +
facet_grid(pmax.last ~ pmax.first, labeller = labeller(
pmax.last = c("0.05" = "last p < 0.05", "0.1" = "last p < 0.1"),
pmax.first = c("0.05" = "first p < 0.05", "0.1" = "first p < 0.1")
))
ggsave("smaller_n_minimeta_pbound_plot.png", width = 10, height = 7)
set.seed(1337) # reproducible seed
# simulation parameters
params <- crossing(
i = 1:10000, # iterations
n.studies = c(4, 8), # maximum no. of studies (based on lit coding)
n = seq(50, 250, 50), # vector of sample sizes (based on lit coding)
d = 0, # population effect size
pmax.first = c(0.05, 0.1), # vector of first p-values (based on lit coding)
pmax.last = 1, # vector of last p-values (based on lit coding)
method = c("HE", "FE")
)
# using p_bound_meta()
pbound_tmp <- purrr::pmap_dfr(params, function(...) {
dots <- list(...)
p_bound_meta(n.studies = dots$n.studies,
d = dots$d,
n = dots$n,
method = dots$method,
pmax.first = dots$pmax.first,
pmax.last = dots$pmax.last) %>%
mutate(!!!dots)
})
library(shiny); runApp('~/Downloads/MiniMetaApp.R')
runApp('~/Downloads/MiniMetaApp.R')
runApp('~/Downloads/MiniMetaApp.R')
runApp('~/Downloads/MiniMetaApp.R')
runApp('~/Downloads/MiniMetaApp.R')
runApp('~/Downloads/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
library(shinythemes)
install.packages("shinythemes")
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
runApp('~/minimeta_shiny/MiniMetaApp.R')
